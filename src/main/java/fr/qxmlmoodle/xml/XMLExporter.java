package fr.qxmlmoodle.xml;import nu.xom.Element;
/** Class XMLExporter XML exporter helper. */public class XMLExporter {    /** Create an XML context to export quiz.     * @param rootName the name of the root element     * @return XML XOM element     */    public final Element createXMLContext(final String rootName) {        return new Element(rootName);    }    /** Create an element with the specific moodle text marker.     * @param inParentElement the parent XOM element     * @param text the text to add     */    public final void createXMLMoodleText(final Element inParentElement,                                          final String text) {        final Element textMarker = new Element("text");        textMarker.appendChild(text);        inParentElement.appendChild(textMarker);    }    /** Create String XML marker.     * @param inParentElement the parent XOM element     * @param name the marker name     * @param value the marker value     */    public final void addXMLTextMarker(final Element inParentElement,                                       final String name, final String value) {        final Element tmp = new Element(name);        createXMLMoodleText(tmp, value);        inParentElement.appendChild(tmp);    }    /** Create String XML marker.     * @param inParentElement the parent XOM element     * @param name the marker name     * @param value the marker value     */    public final void addXMLMarker(final Element inParentElement,                                   final String name, final String value) {        final Element tmp = new Element(name);        tmp.appendChild(value);        inParentElement.appendChild(tmp);    }    /** Create Integer XML marker.     * @param inParentElement the parent XOM element     * @param name the marker name     * @param value the marker value     */    public final void addXMLMarker(final Element inParentElement,                                   final String name, final int value) {        final Element tmp = new Element(name);        tmp.appendChild(String.valueOf(value));        inParentElement.appendChild(tmp);    }    /** Create Float XML marker.     * @param inParentElement the parent XOM element     * @param name the marker name     * @param value the marker value     */    public final void addXMLMarker(final Element inParentElement,                                   final String name, final float value) {        final Element tmp = new Element(name);        tmp.appendChild(String.valueOf(value));        inParentElement.appendChild(tmp);    }    /** Create Boolean XML marker.     * @param inParentElement the parent XOM element     * @param name the marker name     * @param value the marker value     */    public final void addXMLMarker(final Element inParentElement,                                   final String name, final boolean value) {        final Element tmp = new Element(name);        if (value) {            tmp.appendChild("true");        } else {            tmp.appendChild("false");        }        inParentElement.appendChild(tmp);    }    /** Create Boolean XML marker.     * @param inParentElement the parent XOM element     * @param name the marker name     * @param value the marker value     * @param trueValue the value that represent true     * @param falseValue the value that represent false     */    public final void addXMLMarker(final Element inParentElement,                                   final String name, final boolean value,                                   final String trueValue,                                   final String falseValue) {        final Element tmp = new Element(name);        if (value) {            tmp.appendChild(falseValue);        } else {            tmp.appendChild(falseValue);        }        inParentElement.appendChild(tmp);    }
}
